// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Riber.Infrastructure.Persistence;

#nullable disable

namespace Riber.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251023011529_CreateImageTable")]
    partial class CreateImageTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Riber.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_company_id");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasColumnName("length");

                    b.Property<DateTimeOffset?>("MarkedForDeletionAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("marked_for_deletion_at");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("original_name");

                    b.Property<bool>("ShouldDelete")
                        .HasColumnType("boolean")
                        .HasColumnName("should_delete");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_image_id");

                    b.ToTable("image", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permissions");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_invitation_id");

                    b.HasIndex(new[] { "CompanyId" }, "ix_invitations_company_id");

                    b.ToTable("invitation", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AttendantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_order_id");

                    b.HasIndex("AttendantId");

                    b.HasIndex("CompanyId");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_order_item_id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.Property<uint>("XminCode")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_product_id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "ix_product_name");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_product_category_id");

                    b.HasIndex(new[] { "Name" }, "ix_product_category_name");

                    b.HasIndex(new[] { "CompanyId", "Code" }, "uq_product_category_company_code")
                        .IsUnique();

                    b.ToTable("product_category", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("modified_at");

                    b.HasKey("Id")
                        .HasName("pk_user_id");

                    b.HasIndex(new[] { "CompanyId" }, "ix_user_company_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationPermission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_application_permissions_id");

                    b.HasIndex(new[] { "Name" }, "uq_application_permission_name")
                        .IsUnique();

                    b.ToTable("application_permission", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 101,
                            Category = "Companies",
                            Description = "Ver empresa",
                            IsActive = false,
                            Name = "companies.read"
                        },
                        new
                        {
                            Id = 102,
                            Category = "Companies",
                            Description = "Editar empresas",
                            IsActive = false,
                            Name = "companies.update"
                        },
                        new
                        {
                            Id = 103,
                            Category = "Companies",
                            Description = "Excluir empresas",
                            IsActive = false,
                            Name = "companies.delete"
                        },
                        new
                        {
                            Id = 104,
                            Category = "Companies",
                            Description = "Gerenciar usuários da empresa",
                            IsActive = false,
                            Name = "companies.manage_users"
                        },
                        new
                        {
                            Id = 201,
                            Category = "Orders",
                            Description = "Criar pedidos",
                            IsActive = false,
                            Name = "orders.create"
                        },
                        new
                        {
                            Id = 202,
                            Category = "Orders",
                            Description = "Ver pedidos",
                            IsActive = false,
                            Name = "orders.read"
                        },
                        new
                        {
                            Id = 203,
                            Category = "Orders",
                            Description = "Editar pedidos",
                            IsActive = false,
                            Name = "orders.update"
                        },
                        new
                        {
                            Id = 204,
                            Category = "Orders",
                            Description = "Excluir pedidos",
                            IsActive = false,
                            Name = "orders.delete"
                        },
                        new
                        {
                            Id = 301,
                            Category = "Products",
                            Description = "Cadastrar produtos",
                            IsActive = false,
                            Name = "products.create"
                        },
                        new
                        {
                            Id = 302,
                            Category = "Products",
                            Description = "Visualizar produtos",
                            IsActive = false,
                            Name = "products.read"
                        },
                        new
                        {
                            Id = 303,
                            Category = "Products",
                            Description = "Editar produtos",
                            IsActive = false,
                            Name = "products.update"
                        },
                        new
                        {
                            Id = 304,
                            Category = "Products",
                            Description = "Remover produtos",
                            IsActive = false,
                            Name = "products.delete"
                        },
                        new
                        {
                            Id = 305,
                            Category = "Products",
                            Description = "Importar produtos",
                            IsActive = false,
                            Name = "products.import"
                        },
                        new
                        {
                            Id = 306,
                            Category = "Categories",
                            Description = "Criar categorias",
                            IsActive = false,
                            Name = "categories.create"
                        },
                        new
                        {
                            Id = 307,
                            Category = "Categories",
                            Description = "Visualizar categorias",
                            IsActive = false,
                            Name = "categories.read"
                        },
                        new
                        {
                            Id = 308,
                            Category = "Categories",
                            Description = "Editar categorias",
                            IsActive = false,
                            Name = "categories.update"
                        },
                        new
                        {
                            Id = 309,
                            Category = "Categories",
                            Description = "Remover categorias",
                            IsActive = false,
                            Name = "categories.delete"
                        },
                        new
                        {
                            Id = 401,
                            Category = "Users",
                            Description = "Criar usuários",
                            IsActive = false,
                            Name = "users.create"
                        },
                        new
                        {
                            Id = 402,
                            Category = "Users",
                            Description = "Visualizar usuários",
                            IsActive = false,
                            Name = "users.read"
                        },
                        new
                        {
                            Id = 403,
                            Category = "Users",
                            Description = "Editar usuários",
                            IsActive = false,
                            Name = "users.update"
                        },
                        new
                        {
                            Id = 404,
                            Category = "Users",
                            Description = "Remover usuários",
                            IsActive = false,
                            Name = "users.delete"
                        },
                        new
                        {
                            Id = 405,
                            Category = "Users",
                            Description = "Atribuir funções aos usuários",
                            IsActive = false,
                            Name = "users.assign_roles"
                        },
                        new
                        {
                            Id = 501,
                            Category = "Reports",
                            Description = "Visualizar relatórios",
                            IsActive = false,
                            Name = "reports.view"
                        },
                        new
                        {
                            Id = 502,
                            Category = "Reports",
                            Description = "Exportar relatórios",
                            IsActive = false,
                            Name = "reports.export"
                        },
                        new
                        {
                            Id = 503,
                            Category = "Reports",
                            Description = "Agendar relatórios",
                            IsActive = false,
                            Name = "reports.schedule"
                        },
                        new
                        {
                            Id = 601,
                            Category = "Settings",
                            Description = "Visualizar configurações",
                            IsActive = false,
                            Name = "settings.view"
                        },
                        new
                        {
                            Id = 602,
                            Category = "Settings",
                            Description = "Editar configurações",
                            IsActive = false,
                            Name = "settings.update"
                        },
                        new
                        {
                            Id = 701,
                            Category = "Roles",
                            Description = "Visualizar funções",
                            IsActive = false,
                            Name = "roles.read"
                        },
                        new
                        {
                            Id = 702,
                            Category = "Roles",
                            Description = "Editar funções",
                            IsActive = false,
                            Name = "roles.update"
                        });
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_role_id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("ix_aspnet_role_normalized_name");

                    b.ToTable("aspnet_role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("5b20150c-817c-4020-bb91-59d29f732a32"),
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = new Guid("f9bb36fe-9ac3-4cad-9a37-b90eab601cf5"),
                            Name = "Viewer",
                            NormalizedName = "VIEWER"
                        });
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_role_claim_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnet_role_claim_role_id");

                    b.ToTable("aspnet_role_claim", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permission",
                            ClaimValue = "companies.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permission",
                            ClaimValue = "companies.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permission",
                            ClaimValue = "companies.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permission",
                            ClaimValue = "companies.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permission",
                            ClaimValue = "companies.manage_users",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permission",
                            ClaimValue = "orders.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permission",
                            ClaimValue = "orders.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permission",
                            ClaimValue = "orders.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permission",
                            ClaimValue = "orders.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permission",
                            ClaimValue = "orders.approve",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permission",
                            ClaimValue = "products.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permission",
                            ClaimValue = "products.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permission",
                            ClaimValue = "products.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permission",
                            ClaimValue = "products.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permission",
                            ClaimValue = "products.import",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permission",
                            ClaimValue = "users.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permission",
                            ClaimValue = "users.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permission",
                            ClaimValue = "users.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permission",
                            ClaimValue = "users.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permission",
                            ClaimValue = "users.assign_roles",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permission",
                            ClaimValue = "reports.view",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permission",
                            ClaimValue = "reports.export",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permission",
                            ClaimValue = "reports.schedule",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permission",
                            ClaimValue = "settings.view",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permission",
                            ClaimValue = "settings.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permission",
                            ClaimValue = "roles.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permission",
                            ClaimValue = "roles.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permission",
                            ClaimValue = "roles.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permission",
                            ClaimValue = "roles.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permission",
                            ClaimValue = "roles.assign_permissions",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permission",
                            ClaimValue = "categories.create",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permission",
                            ClaimValue = "categories.read",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permission",
                            ClaimValue = "categories.update",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permission",
                            ClaimValue = "categories.delete",
                            RoleId = new Guid("72bf32a9-69e8-4a57-936b-c6b23c47216d")
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permission",
                            ClaimValue = "products.create",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permission",
                            ClaimValue = "products.read",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permission",
                            ClaimValue = "products.update",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permission",
                            ClaimValue = "products.import",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permission",
                            ClaimValue = "users.create",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permission",
                            ClaimValue = "users.read",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permission",
                            ClaimValue = "users.update",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permission",
                            ClaimValue = "users.assign_roles",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permission",
                            ClaimValue = "reports.view",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permission",
                            ClaimValue = "reports.export",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permission",
                            ClaimValue = "reports.schedule",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permission",
                            ClaimValue = "roles.read",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permission",
                            ClaimValue = "roles.update",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permission",
                            ClaimValue = "roles.assign_permissions",
                            RoleId = new Guid("2a74bf8e-0be3-46cc-9310-fdd5f80bd878")
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permission",
                            ClaimValue = "orders.create",
                            RoleId = new Guid("5b20150c-817c-4020-bb91-59d29f732a32")
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permission",
                            ClaimValue = "orders.read",
                            RoleId = new Guid("5b20150c-817c-4020-bb91-59d29f732a32")
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "permission",
                            ClaimValue = "orders.update",
                            RoleId = new Guid("5b20150c-817c-4020-bb91-59d29f732a32")
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "permission",
                            ClaimValue = "products.read",
                            RoleId = new Guid("5b20150c-817c-4020-bb91-59d29f732a32")
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "permission",
                            ClaimValue = "reports.view",
                            RoleId = new Guid("5b20150c-817c-4020-bb91-59d29f732a32")
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "permission",
                            ClaimValue = "orders.read",
                            RoleId = new Guid("f9bb36fe-9ac3-4cad-9a37-b90eab601cf5")
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "permission",
                            ClaimValue = "products.read",
                            RoleId = new Guid("f9bb36fe-9ac3-4cad-9a37-b90eab601cf5")
                        });
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamptz")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("varchar(36)")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<Guid>("UserDomainId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_domain_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_user_id");

                    b.HasIndex(new[] { "Email" }, "uq_asp_net_user_email")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedEmail" }, "uq_asp_net_user_normalized_email")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUserName" }, "uq_aspnet_user_normalized_user_name")
                        .IsUnique();

                    b.HasIndex(new[] { "PhoneNumber" }, "uq_aspnet_user_phone_number")
                        .IsUnique();

                    b.HasIndex(new[] { "UserDomainId" }, "uq_aspnet_user_user_domain_id")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "uq_aspnet_user_user_name")
                        .IsUnique();

                    b.ToTable("aspnet_user", (string)null);
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_aspnet_user_claim_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnet_user_claim_user_id");

                    b.ToTable("aspnet_user_claim", (string)null);
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey")
                        .HasName("pk_aspnet_user_login_user_id_login_provider_provider_key");

                    b.ToTable("aspnet_user_login", (string)null);
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_aspnet_user_role_user_id_role_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_aspnet_user_role_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_aspnet_user_role_user_id");

                    b.ToTable("aspnet_user_role", (string)null);
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_aspnet_user_token_user_id_login_provider_name");

                    b.ToTable("aspnet_user_token", (string)null);
                });

            modelBuilder.Entity("Riber.Domain.Entities.Company", b =>
                {
                    b.OwnsOne("Riber.Domain.ValueObjects.Email.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_email")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.TaxId.TaxId", "TaxId", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("tax_id_type");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("text")
                                .HasColumnName("tax_id_value");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_tax_id")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.CompanyName.CompanyName", "Name", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Corporate")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("text")
                                .HasColumnName("corporate_name");

                            b1.Property<string>("Fantasy")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("text")
                                .HasColumnName("fantasy_name");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Corporate" }, "uq_company_corporate_name");

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.Phone.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("CompanyId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("text")
                                .HasColumnName("phone");

                            b1.HasKey("CompanyId");

                            b1.HasIndex(new[] { "Value" }, "uq_company_phone")
                                .IsUnique();

                            b1.ToTable("company");

                            b1.WithOwner()
                                .HasForeignKey("CompanyId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("TaxId")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.Image", b =>
                {
                    b.OwnsOne("Riber.Domain.ValueObjects.ContentType.ContentType", "ContentType", b1 =>
                        {
                            b1.Property<Guid>("ImageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("content_type");

                            b1.HasKey("ImageId");

                            b1.ToTable("image");

                            b1.WithOwner()
                                .HasForeignKey("ImageId");
                        });

                    b.Navigation("ContentType")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.Invitation", b =>
                {
                    b.OwnsOne("Riber.Domain.ValueObjects.Email.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("InvitationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("email");

                            b1.HasKey("InvitationId");

                            b1.HasIndex(new[] { "Value" }, "uq_invitations_email")
                                .IsUnique();

                            b1.ToTable("invitation");

                            b1.WithOwner()
                                .HasForeignKey("InvitationId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.RandomToken.RandomToken", "Token", b1 =>
                        {
                            b1.Property<Guid>("InvitationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("text")
                                .HasColumnName("invite_token");

                            b1.HasKey("InvitationId");

                            b1.HasIndex(new[] { "Value" }, "uq_invitation_invite_token")
                                .IsUnique();

                            b1.ToTable("invitation");

                            b1.WithOwner()
                                .HasForeignKey("InvitationId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Token")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.Order", b =>
                {
                    b.HasOne("Riber.Domain.Entities.User", "Attendant")
                        .WithMany()
                        .HasForeignKey("AttendantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_attendant_id");

                    b.HasOne("Riber.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_company_id");

                    b.OwnsOne("Riber.Domain.ValueObjects.RandomToken.RandomToken", "Token", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("text")
                                .HasColumnName("order_token");

                            b1.HasKey("OrderId");

                            b1.HasIndex(new[] { "Value" }, "uq_order_order_token")
                                .IsUnique();

                            b1.ToTable("order");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Attendant");

                    b.Navigation("Company");

                    b.Navigation("Token")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Riber.Domain.Entities.Order", "Order")
                        .WithMany("_items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_order_id");

                    b.HasOne("Riber.Domain.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("Riber.Domain.Entities.OrderItem", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_product_id");

                    b.OwnsOne("Riber.Domain.ValueObjects.Money.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("text")
                                .HasColumnName("unit_price_currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("unit_price");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("order_item");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.Discount.Discount", "ItemDiscount", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("FixedAmount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("numeric")
                                .HasDefaultValue(0m)
                                .HasColumnName("discount_fixed_amount");

                            b1.Property<decimal>("Percentage")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("numeric(4,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("discount_percentage");

                            b1.Property<string>("Reason")
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("discount_reason");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("order_item");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.Quantity.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("OrderItemId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("quantity");

                            b1.HasKey("OrderItemId");

                            b1.ToTable("order_item");

                            b1.WithOwner()
                                .HasForeignKey("OrderItemId");
                        });

                    b.Navigation("ItemDiscount");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Quantity")
                        .IsRequired();

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.Product", b =>
                {
                    b.HasOne("Riber.Domain.Entities.ProductCategory", "Category")
                        .WithMany("_products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_id");

                    b.HasOne("Riber.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_company_id");

                    b.HasOne("Riber.Domain.Entities.Image", "Image")
                        .WithOne()
                        .HasForeignKey("Riber.Domain.Entities.Product", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_product_image_id");

                    b.OwnsOne("Riber.Domain.ValueObjects.Money.Money", "UnitPrice", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("text")
                                .HasColumnName("unit_price_currency");

                            b1.Property<decimal>("Value")
                                .HasColumnType("numeric")
                                .HasColumnName("unit_price");

                            b1.HasKey("ProductId");

                            b1.ToTable("product");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Image");

                    b.Navigation("UnitPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("Riber.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Riber.Domain.Entities.User", b =>
                {
                    b.HasOne("Riber.Domain.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_company_id");

                    b.OwnsOne("Riber.Domain.ValueObjects.TaxId.TaxId", "TaxId", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("tax_id_type");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("text")
                                .HasColumnName("tax_id_value");

                            b1.HasKey("UserId");

                            b1.HasIndex(new[] { "Value" }, "uq_user_tax_id")
                                .IsUnique();

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Riber.Domain.ValueObjects.FullName.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("text")
                                .HasColumnName("full_name");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Company");

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("TaxId")
                        .IsRequired();
                });

            modelBuilder.Entity("Riber.Infrastructure.Persistence.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Riber.Domain.Entities.User", "UserDomain")
                        .WithOne()
                        .HasForeignKey("Riber.Infrastructure.Persistence.Identity.ApplicationUser", "UserDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aspnet_user_user_domain_id");

                    b.Navigation("UserDomain");
                });

            modelBuilder.Entity("Riber.Domain.Entities.Order", b =>
                {
                    b.Navigation("_items");
                });

            modelBuilder.Entity("Riber.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("_products");
                });
#pragma warning restore 612, 618
        }
    }
}
